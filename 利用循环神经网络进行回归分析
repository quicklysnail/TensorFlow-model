# -*- coding: utf-8 -*-



import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Hyer Parameters
time_step = 10
input_size = 1   #   input_size = output_size
cell_size = 32
lr = 0.02


# show data
steps = np.linspace(0, np.pi*2, 100, dtype=np.float32)
x_np = np.sin(steps)    # float32 for converting torch FloatTensor
y_np = np.cos(steps)
plt.plot(steps, y_np, 'r-', label='target (cos)')
plt.plot(steps, x_np, 'b-', label='input (sin)')
plt.legend(loc='best')
plt.show()


g  = np.linspace( 0, 2*np.pi, 5 )


# tensorflow placeholders
tf_x = tf.placeholder(tf.float32 , [None , time_step , input_size])
tf_y = tf.placeholder(tf.float32 , [None ,time_step , input_size])

# RNN
rnn_cell = tf.contrib.rnn.BasicRNNCell(num_units = cell_size)
init_s = rnn_cell.zero_state(batch_size = 1 ,dtype= tf.float32)   # very first hidden state

outputs , final_s = tf.nn.dynamic_rnn(rnn_cell , tf_x , initial_state = init_s , time_major=False)

outs2D = tf.reshape(outputs , [-1 , cell_size])    # reshape 3D output to 2D for fully connected layer
#相当于一个全连接层
net_outs2D = tf.layers.dense(outs2D ,input_size)

outs =tf.reshape(net_outs2D ,[-1 , time_step , input_size])  # reshape back to 3D
#均方误差
loss =tf.losses.mean_squared_error(labels=tf_y , predictions=outs) # compute cost
train_op = tf.train.AdamOptimizer(lr).minimize(loss)

sess = tf.Session()
sess.run(tf.global_variables_initializer())    # initialize var in graph

plt.figure(1, figsize=(12, 5))
plt.ion()   # continuously plot
plt.show()


for step in range(60):
    start , end =step*np.pi , (step+1)*np.pi   # time range
    # use sin predicts cos
    steps = np.linspace(start , end ,time_step)
    x = np.sin(steps).reshape((-1,time_step,input_size))    # shape (batch, time_step, input_size)
    y = np.cos(steps).reshape((-1,time_step,input_size)) 
    
    if 'final_s_' not in globals():                 # first state, no any hidden state
        feed_dict = {tf_x: x, tf_y: y}
    else:                                           # has hidden state, so pass it to rnn
        feed_dict = {tf_x: x, tf_y: y, init_s: final_s_}
    _, pred_, final_s_ = sess.run([train_op, outs, final_s], feed_dict)     # train
    
    # plotting
    
    plt.plot(steps ,y .flatten() ,'r-')
    plt.plot(steps ,pred_.flatten() ,'b-')
    plt.ylim((-1.2,1.2))
    plt.draw()
    plt.pause(0.05)

plt.ioff()
plt.show()

