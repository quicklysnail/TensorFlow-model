# -*- coding: utf-8 -*-

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# def 添加或定义一个神经层
def add_layer(inputs , in_size , out_size ,activation_function =None):
    with tf.name_scope('layer'):
        with tf.name_scope('weights'):
            Weights = tf.Variable(tf.random_normal([in_size , out_size]) ,name='w')  ###  in_size行 ， out_size列
        with tf.name_scope('biases'):
            biases = tf.Variable(tf.zeros([1 , out_size]) + 0.1 ,name='b')  ###  1行 ， out_size列 初始值不为零
        with tf.name_scope('Wx_plus'):
            Wx_plus_b = tf.matmul(inputs , Weights) + biases ###  WX + b
        if activation_function is None:
            outputs = Wx_plus_b
        else:
            outputs = activation_function(Wx_plus_b)
        return outputs

# 建造神经网络

x_data = np.linspace(-1 , 1 , 300)[: , np.newaxis]  ###  (-1 ,1)范围，300个数，
noise = np.random.normal(0 , 0.05 , x_data.shape) ##  均值0 ， 方差 0.05 形状和x_data一样
y_data = np.square(x_data) - 0.5 + noise


with tf.name_scope('inputs'):   
    xs = tf.placeholder(tf.float32,[None , 1] ,name = 'x_input')  ### 传入的样本数量不定，一次传入值的维度是 一
    ys = tf.placeholder(tf.float32,[None , 1], name = 'y_input')   ### 传入的样本数量不定，一次传入值的维度是 一

l1 = add_layer(xs , 1 , 10 ,activation_function = tf.nn.relu) ### 第一个hiddened layer
prediction = add_layer(l1 , 10 , 1, activation_function = None)

with tf.name_scope('loss'):
    loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction) , reduction_indices=[1]))  ####　最小化均方误差
with tf.name_scope('train'):
    train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)

init = tf.global_variables_initializer()    #### tf.global_variables_initializer代替initialize_all_variables
sess = tf.Session()
writer = tf.summary.FileWriter("logs/", sess.graph) ###保存计算图
sess.run(init)


# plot the real data
fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.scatter(x_data, y_data)
plt.ion()#本次运行请注释，全局运行不要注释
plt.show()

for i in range(1000):
    # training
    sess.run(train_step, feed_dict={xs: x_data, ys: y_data})
    if i % 50 == 0:
        # to visualize the result and improvement
        try:
            ax.lines.remove(lines[0])
        except Exception:
            pass
        prediction_value = sess.run(prediction, feed_dict={xs: x_data})
        # plot the prediction
        lines = ax.plot(x_data, prediction_value, 'r-', lw=5)
        plt.pause(0.1)

